version: '3'

networks:
  monitor:
    driver: bridge

volumes:
  es_data:
    driver: local
  influx_data:
    driver: local
  pgadmin_root_prefs:
    driver: local
  postgresql_data:
    driver: local
  postgresql_bin:
    driver: local
  prometheus_data: {}
  grafana_data: {}

services:
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      -  postgresql_bin:/usr/lib/postgresql
      -  postgresql_data:/var/lib/postgresql/data
      -  ./conf/postgres/postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - 5432:5432
    networks:
      - monitor
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
      
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: postgres
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_root_prefs:/root/.pgadmin
    ports:
      - 5050:5050
    networks:
      - monitor
  
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin1234
      - DOCKER_INFLUXDB_INIT_ORG=myorg
      - DOCKER_INFLUXDB_INIT_BUCKET=user
    volumes:
      - influx_data:/var/lib/influxdb
    networks:
      - monitor

  elasticsearch:
    image: elasticsearch:7.10.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - http.host=0.0.0.0
      - http.port=9200
      - transport.host=127.0.0.1
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.cors.allow-origin=*"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./conf/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - monitor

  kibana:
    image: kibana:7.10.1
    container_name: kibana-local
    environment:
      SERVER_NAME: kibana-server
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - monitor
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601" 

  prometheus:
    image: prom/prometheus:v2.36.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - monitor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    ports:
      - 8080:8080
    networks:
      - monitor

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:8.3.1
    ports:
      - 3000:3000
    user: "${UID}:${GID}"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,marcusolsson-json-datasource
    volumes:
      - ./grafana-plugins:/var/lib/grafana/plugins
      - ./conf/grafana/provisioning:/etc/grafana/provisioning
      - ./conf/grafana/grafana.ini:/etc/grafana/grafana.ini
    #restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitor
